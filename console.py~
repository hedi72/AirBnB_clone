#!/usr/bin/python3
""" All method command interpreter """
import cmd
import sys
from models import storage
from models.user import User
from models.state import State
from models.review import Review
from models.city import City
from models.amenity import Amenity
from models.place import Place
from models.base_model import BaseModel
from models.engine.file_storage import FileStorage


class HBNBCommand(cmd.Cmd):
    """console class"""

    prompt = "(hbnb) "

    def do_EOF(self, line):
        print()
        return True

    def do_quit(self, line):
        return True

    def emptyline(self):
        pass

    def remove_quot(self, args):
        """removes the quotations and commas from the arguments"""

        for i in range(len(args)):
            if args[i][0] in ('"', "'"):
                args[i] = args[i].replace('"', "").replace("'", "")
        return args

    def do_create(self, line):
        """Create command: creates a new instance of BaseModel"""

        if (self.errors(line, "create") == 1):
            return False
        
        instance = eval(line)()
        instance.save()
        print(instance.id)

    def do_show(self, line):
        """Show command"""

        if (self.errors(line, "show") == 1):
            return False
        args = line.split()
        instances_dict = storage.all()
        args = self.remove_quot(args)
        print(instances_dict[args[0] + '.' + args[1]])

    def counter(self, cls_name):

        num_of_instances = 0
        instances_dict = storage.all()
        for inst in instances_dict.values():
            if inst.__class__.__name__ == cls_name:
                num_of_instances += 1
        print(num_of_instances)

    def do_destroy(self, line):
        
        if (self.errors(line, "destroy") == 1):
            return False

        instances_dict = storage.all()
        args = line.split()
        args = self.remove_quot(args)
        del instances_dict[args[0] + '.' + args[1]]
        storage.save()

    def do_update(self, line):
        if (self.errors(line, "update") == 1):
            return False

        args = line.split()
        instances_dict = storage.all()
        args = self.remove_quot(args)
        x = args[0] + '.' + args[1]
        new_key = args[2]
        if args[3].isdigit():
            new_value = eval(args[3])
        else:
            new_value = args[3]
        setattr(instances_dict[x], new_key, new_value)
        storage.save()

    def do_all(self, line):
        
        instances_dict = storage.all()
        d_list = []
        if line == "":
            d_list = [str(i) for i in instances_dict.values()]
            print(d_list)
            return False
        args = line.split()
        if (self.errors(line, "all") == 1):
            return False
        for i in instances_dict.values():
            if i.__class__.__name__ == args[0]:
                d_list.append(str(i))
        print(d_list)


    def errors(self, line, cmd):
        """manages error messages for user input"""

        cls_list = [
            "BaseModel", "User", "State", "City",
            "Amenity", "Place", "Review"
        ]
        cmd_list = ["create", "show", "all", "destroy", "update"]

        if line == "":
            print("** class name missing **")
            return 1
        args = line.split()
        if args[0] not in cls_list and cmd in cmd_list:
            print("** class doesn't exist **")
            return 1
        elif cmd in ["create", "all"]:
            return 0

        if len(args) < 2 and cmd in ["show", "destroy", "update"]:
            print("** instance id missing **")
            return 1

        instances_dict = storage.all()
        args = self.remove_quot(args)
        k = args[0] + '.' + args[1]

        if k not in instances_dict and cmd in ["show", "destroy", "update"]:
            print("** no instance found **")
            return 1
        elif cmd in ["show", "destroy"]:
            return 0

        if len(args) < 3 and cmd == "update":
            print("** attribute name missing **")
            return 1
        if len(args) < 4 and cmd == "update":
            print("** value missing **")
            return 1
        return 0
